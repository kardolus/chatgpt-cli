// This file was auto-generated by Fern from our API Definition.

package finetuning

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/cohere-ai/cohere-go/v2/core"
	time "time"
)

// The base model used for fine-tuning.
type BaseModel struct {
	// The name of the base model.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// read-only. The version of the base model.
	Version *string `json:"version,omitempty" url:"version,omitempty"`
	// The type of the base model.
	BaseType BaseType `json:"base_type" url:"base_type"`
	// The fine-tuning strategy.
	Strategy *Strategy `json:"strategy,omitempty" url:"strategy,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BaseModel) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseModel(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseModel) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The possible types of fine-tuned models.
//
// - BASE_TYPE_UNSPECIFIED: Unspecified model.
// - BASE_TYPE_GENERATIVE: Generative model.
// - BASE_TYPE_CLASSIFICATION: Classification model.
// - BASE_TYPE_RERANK: Rerank model.
// - BASE_TYPE_CHAT: Chat model.
type BaseType string

const (
	BaseTypeBaseTypeUnspecified    BaseType = "BASE_TYPE_UNSPECIFIED"
	BaseTypeBaseTypeGenerative     BaseType = "BASE_TYPE_GENERATIVE"
	BaseTypeBaseTypeClassification BaseType = "BASE_TYPE_CLASSIFICATION"
	BaseTypeBaseTypeRerank         BaseType = "BASE_TYPE_RERANK"
	BaseTypeBaseTypeChat           BaseType = "BASE_TYPE_CHAT"
)

func NewBaseTypeFromString(s string) (BaseType, error) {
	switch s {
	case "BASE_TYPE_UNSPECIFIED":
		return BaseTypeBaseTypeUnspecified, nil
	case "BASE_TYPE_GENERATIVE":
		return BaseTypeBaseTypeGenerative, nil
	case "BASE_TYPE_CLASSIFICATION":
		return BaseTypeBaseTypeClassification, nil
	case "BASE_TYPE_RERANK":
		return BaseTypeBaseTypeRerank, nil
	case "BASE_TYPE_CHAT":
		return BaseTypeBaseTypeChat, nil
	}
	var t BaseType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BaseType) Ptr() *BaseType {
	return &b
}

// Response to request to create a fine-tuned model.
type CreateFinetunedModelResponse struct {
	// Information about the fine-tuned model.
	FinetunedModel *FinetunedModel `json:"finetuned_model,omitempty" url:"finetuned_model,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateFinetunedModelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateFinetunedModelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateFinetunedModelResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFinetunedModelResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response to request to delete a fine-tuned model.
type DeleteFinetunedModelResponse = map[string]interface{}

// Error is the response for any unsuccessful event.
type Error struct {
	// A developer-facing error message.
	Message *string `json:"message,omitempty" url:"message,omitempty"`

	_rawJSON json.RawMessage
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Error) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// A change in status of a fine-tuned model.
type Event struct {
	// ID of the user who initiated the event. Empty if initiated by the system.
	UserId *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// Status of the fine-tuned model.
	Status *Status `json:"status,omitempty" url:"status,omitempty"`
	// Timestamp when the event happened.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`

	_rawJSON json.RawMessage
}

func (e *Event) UnmarshalJSON(data []byte) error {
	type embed Event
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = Event(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.TimePtr()

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Event) MarshalJSON() ([]byte, error) {
	type embed Event
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewOptionalDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *Event) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// This resource represents a fine-tuned model.
type FinetunedModel struct {
	// read-only. FinetunedModel ID.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// FinetunedModel name (e.g. `foobar`).
	Name string `json:"name" url:"name"`
	// read-only. User ID of the creator.
	CreatorId *string `json:"creator_id,omitempty" url:"creator_id,omitempty"`
	// read-only. Organization ID.
	OrganizationId *string `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	// FinetunedModel settings such as dataset, hyperparameters...
	Settings *Settings `json:"settings,omitempty" url:"settings,omitempty"`
	// read-only. Current stage in the life-cycle of the fine-tuned model.
	Status *Status `json:"status,omitempty" url:"status,omitempty"`
	// read-only. Creation timestamp.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// read-only. Latest update timestamp.
	UpdatedAt *time.Time `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// read-only. Timestamp for the completed fine-tuning.
	CompletedAt *time.Time `json:"completed_at,omitempty" url:"completed_at,omitempty"`
	// read-only. Timestamp for the latest request to this fine-tuned model.
	LastUsed *time.Time `json:"last_used,omitempty" url:"last_used,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FinetunedModel) UnmarshalJSON(data []byte) error {
	type embed FinetunedModel
	var unmarshaler = struct {
		embed
		CreatedAt   *core.DateTime `json:"created_at,omitempty"`
		UpdatedAt   *core.DateTime `json:"updated_at,omitempty"`
		CompletedAt *core.DateTime `json:"completed_at,omitempty"`
		LastUsed    *core.DateTime `json:"last_used,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FinetunedModel(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	f.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	f.CompletedAt = unmarshaler.CompletedAt.TimePtr()
	f.LastUsed = unmarshaler.LastUsed.TimePtr()

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinetunedModel) MarshalJSON() ([]byte, error) {
	type embed FinetunedModel
	var marshaler = struct {
		embed
		CreatedAt   *core.DateTime `json:"created_at,omitempty"`
		UpdatedAt   *core.DateTime `json:"updated_at,omitempty"`
		CompletedAt *core.DateTime `json:"completed_at,omitempty"`
		LastUsed    *core.DateTime `json:"last_used,omitempty"`
	}{
		embed:       embed(*f),
		CreatedAt:   core.NewOptionalDateTime(f.CreatedAt),
		UpdatedAt:   core.NewOptionalDateTime(f.UpdatedAt),
		CompletedAt: core.NewOptionalDateTime(f.CompletedAt),
		LastUsed:    core.NewOptionalDateTime(f.LastUsed),
	}
	return json.Marshal(marshaler)
}

func (f *FinetunedModel) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// Response to a request to get a fine-tuned model.
type GetFinetunedModelResponse struct {
	// Information about the fine-tuned model.
	FinetunedModel *FinetunedModel `json:"finetuned_model,omitempty" url:"finetuned_model,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetFinetunedModelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetFinetunedModelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetFinetunedModelResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFinetunedModelResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The fine-tuning hyperparameters.
type Hyperparameters struct {
	// Stops training if the loss metric does not improve beyond the value of
	// `early_stopping_threshold` after this many times of evaluation.
	EarlyStoppingPatience *int `json:"early_stopping_patience,omitempty" url:"early_stopping_patience,omitempty"`
	// How much the loss must improve to prevent early stopping.
	EarlyStoppingThreshold *float64 `json:"early_stopping_threshold,omitempty" url:"early_stopping_threshold,omitempty"`
	// The batch size is the number of training examples included in a single
	// training pass.
	TrainBatchSize *int `json:"train_batch_size,omitempty" url:"train_batch_size,omitempty"`
	// The number of epochs to train for.
	TrainEpochs *int `json:"train_epochs,omitempty" url:"train_epochs,omitempty"`
	// The learning rate to be used during training.
	LearningRate *float64 `json:"learning_rate,omitempty" url:"learning_rate,omitempty"`

	_rawJSON json.RawMessage
}

func (h *Hyperparameters) UnmarshalJSON(data []byte) error {
	type unmarshaler Hyperparameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = Hyperparameters(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *Hyperparameters) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Response to a request to list events of a fine-tuned model.
type ListEventsResponse struct {
	// List of events for the fine-tuned model.
	Events []*Event `json:"events,omitempty" url:"events,omitempty"`
	// Pagination token to retrieve the next page of results. If the value is "",
	// it means no further results for the request.
	NextPageToken *string `json:"next_page_token,omitempty" url:"next_page_token,omitempty"`
	// Total count of results.
	TotalSize *int `json:"total_size,omitempty" url:"total_size,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEventsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEventsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Response to a request to list fine-tuned models.
type ListFinetunedModelsResponse struct {
	// List of fine-tuned models matching the request.
	FinetunedModels []*FinetunedModel `json:"finetuned_models,omitempty" url:"finetuned_models,omitempty"`
	// Pagination token to retrieve the next page of results. If the value is "",
	// it means no further results for the request.
	NextPageToken *string `json:"next_page_token,omitempty" url:"next_page_token,omitempty"`
	// Total count of results.
	TotalSize *int `json:"total_size,omitempty" url:"total_size,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListFinetunedModelsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFinetunedModelsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFinetunedModelsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFinetunedModelsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Response to a request to list training-step metrics of a fine-tuned model.
type ListTrainingStepMetricsResponse struct {
	// The metrics for each step the evaluation was run on.
	StepMetrics []*TrainingStepMetrics `json:"step_metrics,omitempty" url:"step_metrics,omitempty"`
	// Pagination token to retrieve the next page of results. If the value is "",
	// it means no further results for the request.
	NextPageToken *string `json:"next_page_token,omitempty" url:"next_page_token,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListTrainingStepMetricsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListTrainingStepMetricsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListTrainingStepMetricsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListTrainingStepMetricsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The configuration used for fine-tuning.
type Settings struct {
	// The base model to fine-tune.
	BaseModel *BaseModel `json:"base_model,omitempty" url:"base_model,omitempty"`
	// The data used for training and evaluating the fine-tuned model.
	DatasetId string `json:"dataset_id" url:"dataset_id"`
	// Fine-tuning hyper-parameters.
	Hyperparameters *Hyperparameters `json:"hyperparameters,omitempty" url:"hyperparameters,omitempty"`
	// read-only. Whether the model is single-label or multi-label (only for classification).
	MultiLabel *bool `json:"multi_label,omitempty" url:"multi_label,omitempty"`

	_rawJSON json.RawMessage
}

func (s *Settings) UnmarshalJSON(data []byte) error {
	type unmarshaler Settings
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Settings(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Settings) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The possible stages of a fine-tuned model life-cycle.
//
// - STATUS_UNSPECIFIED: Unspecified status.
// - STATUS_FINETUNING: The fine-tuned model is being fine-tuned.
// - STATUS_DEPLOYING_API: The fine-tuned model is being deployed.
// - STATUS_READY: The fine-tuned model is ready to receive requests.
// - STATUS_FAILED: The fine-tuned model failed.
// - STATUS_DELETED: The fine-tuned model was deleted.
// - STATUS_TEMPORARILY_OFFLINE: The fine-tuned model is temporarily unavailable.
// - STATUS_PAUSED: The fine-tuned model is paused (Vanilla only).
// - STATUS_QUEUED: The fine-tuned model is queued for training.
type Status string

const (
	StatusStatusUnspecified        Status = "STATUS_UNSPECIFIED"
	StatusStatusFinetuning         Status = "STATUS_FINETUNING"
	StatusStatusDeployingApi       Status = "STATUS_DEPLOYING_API"
	StatusStatusReady              Status = "STATUS_READY"
	StatusStatusFailed             Status = "STATUS_FAILED"
	StatusStatusDeleted            Status = "STATUS_DELETED"
	StatusStatusTemporarilyOffline Status = "STATUS_TEMPORARILY_OFFLINE"
	StatusStatusPaused             Status = "STATUS_PAUSED"
	StatusStatusQueued             Status = "STATUS_QUEUED"
)

func NewStatusFromString(s string) (Status, error) {
	switch s {
	case "STATUS_UNSPECIFIED":
		return StatusStatusUnspecified, nil
	case "STATUS_FINETUNING":
		return StatusStatusFinetuning, nil
	case "STATUS_DEPLOYING_API":
		return StatusStatusDeployingApi, nil
	case "STATUS_READY":
		return StatusStatusReady, nil
	case "STATUS_FAILED":
		return StatusStatusFailed, nil
	case "STATUS_DELETED":
		return StatusStatusDeleted, nil
	case "STATUS_TEMPORARILY_OFFLINE":
		return StatusStatusTemporarilyOffline, nil
	case "STATUS_PAUSED":
		return StatusStatusPaused, nil
	case "STATUS_QUEUED":
		return StatusStatusQueued, nil
	}
	var t Status
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Status) Ptr() *Status {
	return &s
}

// The possible strategy used to serve a fine-tuned models.
//
// - STRATEGY_UNSPECIFIED: Unspecified strategy.
// - STRATEGY_VANILLA: Serve the fine-tuned model on a dedicated GPU.
// - STRATEGY_TFEW: Serve the fine-tuned model on a shared GPU.
type Strategy string

const (
	StrategyStrategyUnspecified Strategy = "STRATEGY_UNSPECIFIED"
	StrategyStrategyVanilla     Strategy = "STRATEGY_VANILLA"
	StrategyStrategyTfew        Strategy = "STRATEGY_TFEW"
)

func NewStrategyFromString(s string) (Strategy, error) {
	switch s {
	case "STRATEGY_UNSPECIFIED":
		return StrategyStrategyUnspecified, nil
	case "STRATEGY_VANILLA":
		return StrategyStrategyVanilla, nil
	case "STRATEGY_TFEW":
		return StrategyStrategyTfew, nil
	}
	var t Strategy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Strategy) Ptr() *Strategy {
	return &s
}

// The evaluation metrics at a given step of the training of a fine-tuned model.
type TrainingStepMetrics struct {
	// Creation timestamp.
	CreatedAt *time.Time `json:"created_at,omitempty" url:"created_at,omitempty"`
	// Step number.
	StepNumber *int `json:"step_number,omitempty" url:"step_number,omitempty"`
	// Map of names and values for each evaluation metrics.
	Metrics map[string]float64 `json:"metrics,omitempty" url:"metrics,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TrainingStepMetrics) UnmarshalJSON(data []byte) error {
	type embed TrainingStepMetrics
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TrainingStepMetrics(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.TimePtr()

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TrainingStepMetrics) MarshalJSON() ([]byte, error) {
	type embed TrainingStepMetrics
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*t),
		CreatedAt: core.NewOptionalDateTime(t.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TrainingStepMetrics) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Response to a request to update a fine-tuned model.
type UpdateFinetunedModelResponse struct {
	// Information about the fine-tuned model.
	FinetunedModel *FinetunedModel `json:"finetuned_model,omitempty" url:"finetuned_model,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpdateFinetunedModelResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateFinetunedModelResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateFinetunedModelResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateFinetunedModelResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
